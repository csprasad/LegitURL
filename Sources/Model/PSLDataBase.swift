//
//  Untitled.swift
//  LegitURL
//
//  Created by Chief Hakka on 07/03/2025.
//
import SQLite3
import Foundation

import SQLite3
import Foundation

func isValidTLD(_ tld: String) -> Bool {
    // 1. Locate the database in the app bundle
    guard let dbURL = Bundle.main.url(forResource: "public_suffix_list", withExtension: "sqlite") else {
        print("ERROR: Database file not found in Bundle.")
        return false
    }
    
    // 2. Open the database
    var db: OpaquePointer?
    if sqlite3_open(dbURL.path, &db) != SQLITE_OK {
        print("ERROR: Failed to open database:", String(cString: sqlite3_errmsg(db)!))
        return false
    }
    
    // 3. Close the database when the function returns (success or fail)
    defer {
        if db != nil {
            sqlite3_close(db)
        }
    }
    
    // 4. Prepare and execute the query
    let query = "SELECT COUNT(*) FROM psl WHERE punycode_suffix = ?"
    var stmt: OpaquePointer?
    let cleanTLD = tld.trimmingCharacters(in: .whitespacesAndNewlines)
    
    if sqlite3_prepare_v2(db, query, -1, &stmt, nil) == SQLITE_OK {
        defer {
            // Make sure to finalize the statement
            sqlite3_finalize(stmt)
        }
        
        // Bind the TLD to the placeholder
        if sqlite3_bind_text(stmt, 1, cleanTLD, -1, unsafeBitCast(-1, to: sqlite3_destructor_type.self)) != SQLITE_OK {
            print("ERROR: Failed to bind TLD value:", cleanTLD)
        }
        
        // Execute and read result
        if sqlite3_step(stmt) == SQLITE_ROW {
            let count = sqlite3_column_int(stmt, 0)
            return count > 0
        }
    } else {
        print("ERROR: Failed to prepare SQL statement:", String(cString: sqlite3_errmsg(db)!))
    }
    
    // 5. Fallback if something fails
    sqlite3_finalize(stmt)
    return false
}



    /// FUCKING DB

//    func debugQuery() {
//        guard let db = db else {
//            print("‚ùå ERROR: Database is not initialized.")
//            return
//        }
//
//        let query = "SELECT suffix FROM psl WHERE punycode_suffix LIKE '%com%' LIMIT 10"
//        var stmt: OpaquePointer?
//
//        if sqlite3_prepare_v2(db, query, -1, &stmt, nil) == SQLITE_OK {
//            print("‚úÖ Database is OPEN! Listing TLDs containing 'com':")
//
//            while sqlite3_step(stmt) == SQLITE_ROW {
//                let suffix = String(cString: sqlite3_column_text(stmt, 0))
//                print("üîπ Found:", suffix)
//            }
//
//            sqlite3_finalize(stmt)
//        } else {
//            print("‚ùå ERROR: Failed to prepare SQL statement:", String(cString: sqlite3_errmsg(db)!))
//        }
//    }
//
//    /// **Dump the entire TLD database**
//    func dumpDatabase() {
//        guard let db = db else {
//            print("‚ùå ERROR: Database is not initialized.")
//            return
//        }
//
//        let query = "SELECT id, suffix FROM psl"
//        var stmt: OpaquePointer?
//
//        if sqlite3_prepare_v2(db, query, -1, &stmt, nil) == SQLITE_OK {
//            print("‚úÖ Dumping all TLDs from DB:")
//
//            var foundCom = false
//            while sqlite3_step(stmt) == SQLITE_ROW {
//                let id = sqlite3_column_int(stmt, 0)
//                let suffix = String(cString: sqlite3_column_text(stmt, 1))
//                print("üîπ ID:", id, "| Suffix:", suffix)
//
//                if suffix == "com" {
//                    print("üî•üî•üî• FOUND 'com' IN SWIFT AT ID \(id)!!! üî•üî•üî•")
//                    foundCom = true
//                }
//            }
//
//            if !foundCom {
//                print("‚ùå‚ùå‚ùå SWIFT CANNOT SEE 'com' IN DB ‚ùå‚ùå‚ùå")
//            }
//
//            sqlite3_finalize(stmt)
//        } else {
//            print("‚ùå ERROR: Failed to prepare SQL statement:", String(cString: sqlite3_errmsg(db)!))
//        }
//    }
//}
